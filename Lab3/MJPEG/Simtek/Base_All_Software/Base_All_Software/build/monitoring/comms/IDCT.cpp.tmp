# 1 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "c:\\spacecodesign\\spacestudio-2.8.0\\toolchains\\arm-unknown-linux-gnueabi\\arm-unknown-linux-gnueabi\\sysroot\\usr\\include\\stdc-predef.h" 1 3 4
/* Copyright (C) 1991-2014 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */




/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */

/* glibc's intent is to support the IEC 559 math functionality, real
   and complex.  If the GCC (4.9 and later) predefined macros
   specifying compiler intent are available, use them to determine
   whether the overall intent is to support these features; otherwise,
   presume an older compiler has intent to support these features and
   define these macros by default.  */
# 52 "c:\\spacecodesign\\spacestudio-2.8.0\\toolchains\\arm-unknown-linux-gnueabi\\arm-unknown-linux-gnueabi\\sysroot\\usr\\include\\stdc-predef.h" 3 4
/* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /
   Unicode 6.0.  */


/* We do not support C11 <threads.h>.  */
# 1 "<command-line>" 2
# 1 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp"
// ***********************************************************************
//
// Filename : IDCT.cpp
//
// Author : SpaceStudio generation engine
//
// Creation date : Wed Jun 08 15:01:53 EDT 2011
//
//
// ***********************************************************************

#include "IDCT.h"
# 12 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp"
# 1 "C:/MJPEG28/MJPEG/src/module/IDCT.h" 1
// ***********************************************************************
//
// Filename : IDCT.h
//
// Author : SpaceStudio generation engine
//
// Creation date : Wed Jun 08 15:01:53 EDT 2011
//
//
// ***********************************************************************




#include "SpaceBaseModule.h"
# 15 "C:/MJPEG28/MJPEG/src/module/IDCT.h"
# 1 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceStudio/src/main/resources/a/cs/headers/sw/SpaceBaseModule.h" 1



#include "SpaceTypes.h"
# 4 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceStudio/src/main/resources/a/cs/headers/sw/SpaceBaseModule.h"
# 1 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceLib/release/sw/include/SpaceTypes.h" 1
///////////////////////////////////////////////////////////////////////////////
///
///         Space Libraries - Space Codesign Systems Inc. (http://www.spacecodesign.com)
///         (c) All Rights Reserved. 2005-2014                            
///                                                                       
///         This file contains proprietary, confidential information of Space Codesign 
///         Systems Inc. and may be used only pursuant to the terms of a valid license 
///         agreement with Space Codesign Systems Inc. For more information about licensing,
///         please contact your Space Codesign representative. 
/// 
///////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////
///\class     SPACE_STATUS
///
///\brief     Status returned by the Space Codesign engined for end users
///
///////////////////////////////////////////////////////////////////////////////
static const unsigned char SPACE_OK = 0; ///< Tells the operation was completed successfully
static const unsigned char SPACE_ERROR = 1; ///< Tells the operation did not complete and simulation 
static const unsigned char SPACE_EMPTY = 2; ///< may be corrupted or may fail
static const unsigned char SPACE_FULL = 3; ///> Tells the operation cannot be completed because no storage is available
static const unsigned char SPACE_NOT_CONNECTED = 99; ///< REports an access to an unconnected port

typedef unsigned char eSpaceStatus;


///////////////////////////////////////////////////////////////////////////////
///\enum     SpaceChannelStatusStr
///
///\brief    Statuses returned when using Space Interface Methods
///////////////////////////////////////////////////////////////////////////////
typedef enum
{
/**** for platform ****/
 SPACE_CHANNEL_OK = 0, // Was successfully completed from end to end
 SPACE_CHANNEL_FULL = 1, // Channel is FULL and write operation was cancelled
 SPACE_CHANNEL_EMPTY = 2, // Nothing to read and data pointer is invalid
 SPACE_CHANNEL_UNUSED_STATUS_1 = 3, // Currently unused status code

 SPACE_CHANNEL_UNUSED_STATUS_2 = 4, // Currently unused status code
    SPACE_CHANNEL_ADDR_OUT_OF_RANGE = 5, // Destination Address was out of range

 SPACE_CHANNEL_ERROR = 6, // An unrecoverable error from which the system cannot recover occured
          // Users receiving this error are recommended to stop the simulation
 SPACE_CHANNEL_TERMINATOR_ACCESS = 7, // An unbound port was accessed. 
          // Users receiving this error are recommended to stop the simulation

    SPACE_CHANNEL_MSG_SIZE_ERROR = 8, // Platform: Unsupported Size of Request
    SPACE_CHANNEL_NO_QUEUE_AVAILABLE = 9, // SW:No queue available in FreeQueuePool (in the case of writing)
 SPACE_CHANNEL_UNUSED_STATUS_4 = 10, // Currently unused status code

 /**** for RTL ****/
 SPACE_CHANNEL_IN_PROGRESS = 11, // Request currently being processed


/**** NEW ****/

 SPACE_UNKNOWN_DESTINATION = 12,
 SPACE_INVALID_OFFSET = 13


} eSpaceChannelStatus;


///////////////////////////////////////////////////////////////////////////////
///\enum     eSpaceTransactionType
///
///\brief    SPACE Transaction options. 
///\note     Updated with unsigned long type. 
///////////////////////////////////////////////////////////////////////////////
static const unsigned long SPACE_NON_BLOCKING = 0; ///< Indicates the transaction is non blocking
static const unsigned long SPACE_NO_WAIT = 0;
static const unsigned long SPACE_BLOCKING = 0xFFFFFFFF; ///< Indicates the transaction is blocking
static const unsigned long SPACE_WAIT_FOREVER = 0xFFFFFFFF;

typedef unsigned long eSpaceTransactionType;


///////////////////////////////////////////////////////////////////////////////
///\class     enum eSpaceComponentType
///
///\brief     Descriptor found in eSpaceComponentType representing either
///           a module or a device 
///////////////////////////////////////////////////////////////////////////////
typedef enum
{
    SPACE_UNREGISTERED = 0,
    SPACE_MODULE = 1,
    SPACE_DEVICE = 2,
    //SPACE_MODULE_ADAPTER = 3,
 SPACE_ISS_ADAPTER = 4,
 SPACE_REGISTER_FILE = 5,
 SPACE_SLAVE_BRIDGE = 6
} eSpaceComponentType;


///////////////////////////////////////////////////////////////////////////////
///\enum      eSpaceCommunicationType
///
///\brief      SPACE communication types
///////////////////////////////////////////////////////////////////////////////
typedef enum
{
 SPACE_MODULE_READ = 0,
 SPACE_MODULE_WRITE = 1,
 SPACE_DEVICE_READ = 2,
 SPACE_DEVICE_WRITE = 3,
 SPACE_REGISTER_READ = 4,
 SPACE_REGISTER_WRITE = 5,
 SPACE_UNKNOWN_COMMUNICATION = 0xFF
} eSpaceCommunicationType;



/* (c) Space Codesign Systems Inc. 2005-2014 */
# 5 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceStudio/src/main/resources/a/cs/headers/sw/SpaceBaseModule.h" 2

#include "systemc"
# 6 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceStudio/src/main/resources/a/cs/headers/sw/SpaceBaseModule.h"
# 1 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceStudio/src/main/resources/a/cs/headers/sw/systemc" 1



// Nothing from SystemC proper
namespace sc_core {
}
# 7 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceStudio/src/main/resources/a/cs/headers/sw/SpaceBaseModule.h" 2

class SpaceBaseModule;
# 16 "C:/MJPEG28/MJPEG/src/module/IDCT.h" 2
#include "jpeg.h"
# 16 "C:/MJPEG28/MJPEG/src/module/IDCT.h"
# 1 "C:/MJPEG28/MJPEG/import/src/jpeg.h" 1
///////////////////////////////////////////////////////////////////////////////
//
//	jpeg.h
//
///////////////////////////////////////////////////////////////////////////////
# 14 "C:/MJPEG28/MJPEG/import/src/jpeg.h"
// Marker
# 26 "C:/MJPEG28/MJPEG/import/src/jpeg.h"
// DEMUX COMMAND





/* is x a restart interval ? */


// Macros
# 17 "C:/MJPEG28/MJPEG/src/module/IDCT.h" 2

#include <systemc.h>
# 18 "C:/MJPEG28/MJPEG/src/module/IDCT.h"
# 1 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceStudio/src/main/resources/a/cs/headers/sw/systemc.h" 1



#include "systemc"

// Using declarations in the C++ standard library, as specified in IEEE 1666-2011, section 5.1.2
namespace std {}
using std::ios;
using std::streambuf;
using std::streampos;
using std::streamsize;
using std::iostream;
using std::istream;
using std::ostream;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::flush;
using std::dec;
using std::hex;
using std::oct;
using std::fstream;
using std::ifstream;
using std::ofstream;
using std::size_t;
using std::memchr;
using std::memcmp;
using std::memcpy;
using std::memmove;
using std::memset;
using std::strcat;
using std::strncat;
using std::strchr;
using std::strrchr;
using std::strcmp;
using std::strncmp;
using std::strcpy;
using std::strncpy;
using std::strcspn;
using std::strspn;
using std::strlen;
using std::strpbrk;
using std::strstr;
using std::strtok;
# 19 "C:/MJPEG28/MJPEG/src/module/IDCT.h" 2

// Definition
# 41 "C:/MJPEG28/MJPEG/src/module/IDCT.h"
/* The number of bits of accuracy in all (signed) integer operations:

   May lie between 1 and 32 (bounds inclusive).

*/
/* The minimum signed integer value that fits in ARITH_BITS: */



/* The number of bits coefficients are scaled up before 2-D idct: */

/* The number of bits in the fractional part of a fixed point constant: */


/* This version is vital in passing overall mean error test. */


class IDCT : public SpaceBaseModule
{
 public:

     SC_HAS_PROCESS(IDCT);

  // Default constructor
  IDCT( sc_module_name zName,
        double dClockPeriod,
        sc_time_unit Unit,
        unsigned char ucID,
        unsigned char ucPriority,
        bool bVerbose);

  // Thread
     void thread(void);

 private:

  void rot(int f, int k, int x, int y, int* rx, int* ry);
  void idct_1d(int* Y);

};
# 13 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp" 2

// Automatically-generated includes
#include "PlatformDefinitions.h"
# 15 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp"
# 1 "temp/PlatformDefinitions.h" 1
// ***********************************************************************
//
// Filename: 		PlatformDefinitions.h
//
// Level:			Simtek
//
// Author: 			SpaceStudio generation engine
//
// Warning: 
// ========
//			1) This file content will be overwritten by the next generation process.
//			2) All the ID must be unique to the current project.
//
// ***********************************************************************




//Level of technology of this platform


// User's Module ID
# 32 "temp/PlatformDefinitions.h"
// User's Device(and Wrapper) ID


// User's Module priority
# 45 "temp/PlatformDefinitions.h"
// User's Device(and Wrapper) priority

// SpaceComponents IDs
# 61 "temp/PlatformDefinitions.h"
// SpaceComponents PRIOs




// Memories' size
# 16 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp" 2

// User-generated includes
#include "ApplicationDefinitions.h"
# 18 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp"
# 1 "C:/MJPEG28/MJPEG/src/application/ApplicationDefinitions.h" 1
// ***********************************************************************
//
// Filename: 		ApplicationDefinitions.h
//
// Author: 			SpaceStudio generation engine
//
// Creation date: 	Fri Oct 07 11:16:52 EDT 2016
//
// Warning: 		This file will not be overwritten by the SpaceStudio 
//					generation engine.
//
// Note:			This file is automatically added in a new project or in an 
//					existing project only if this file is not already present.
//					Otherwise, this file remains untouched by the SpaceStudio 
//					generation engine.  So this is a good place to declare 
//					variables that are specific to your application and that 
//					you need to share between your configurations.
//
// ***********************************************************************







#include <stdint.h>
# 27 "C:/MJPEG28/MJPEG/src/application/ApplicationDefinitions.h"
# 1 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceStudio/src/main/resources/a/cs/headers/sw/stdint.h" 1
///         Space Libraries - Space Codesign Systems Inc. (http://www.spacecodesign.com)
///         (c) All Rights Reserved. 2005-2014                            
///                                                                       
///         This file contains proprietary, confidential information of Space Codesign 
///         Systems Inc. and may be used only pursuant to the terms of a valid license 
///         agreement with Space Codesign Systems Inc. For more information about licensing,
///         please contact your Space Codesign representative. 
/// 
///////////////////////////////////////////////////////////////////////////////



typedef char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef int int32_t;
typedef unsigned int uint32_t;
typedef long long int64_t;
typedef unsigned long long uint64_t;
typedef char int_least8_t;
typedef unsigned char uint_least8_t;
typedef short int_least16_t;
typedef unsigned short uint_least16_t;
typedef int int_least32_t;
typedef unsigned int uint_least32_t;
typedef long long int_least64_t;
typedef unsigned long long uint_least64_t;
typedef char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short int_fast16_t;
typedef unsigned short uint_fast16_t;
typedef int int_fast32_t;
typedef unsigned int uint_fast32_t;
typedef long long int_fast64_t;
typedef unsigned long long uint_fast64_t;
typedef int* intptr_t;
typedef unsigned int* uintptr_t;
typedef long long intmax_t;
typedef unsigned long long uintmax_t;



/* (c) Space Codesign Systems Inc. 2005-2014 */
# 28 "C:/MJPEG28/MJPEG/src/application/ApplicationDefinitions.h" 2
# 38 "C:/MJPEG28/MJPEG/src/application/ApplicationDefinitions.h"
//#define IMAGE_SAVER_EN 1



struct vld_metrics {
 unsigned int block_count;
 uint64_t time_start;
};
# 19 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp" 2

// Space library includes
#include "SpaceDisplay.h"
# 21 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp"
# 1 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceStudio/src/main/resources/a/cs/headers/sw/SpaceDisplay.h" 1



// Nothing
# 22 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp" 2
#include "SpaceTypes.h"
# 22 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp"
# 1 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceLib/release/sw/include/SpaceTypes.h" 1
///////////////////////////////////////////////////////////////////////////////
///
///         Space Libraries - Space Codesign Systems Inc. (http://www.spacecodesign.com)
///         (c) All Rights Reserved. 2005-2014                            
///                                                                       
///         This file contains proprietary, confidential information of Space Codesign 
///         Systems Inc. and may be used only pursuant to the terms of a valid license 
///         agreement with Space Codesign Systems Inc. For more information about licensing,
///         please contact your Space Codesign representative. 
/// 
///////////////////////////////////////////////////////////////////////////////
# 119 "C:/SpaceCodesign/SpaceStudio-2.8.0/SpaceLib/release/sw/include/SpaceTypes.h"
/* (c) Space Codesign Systems Inc. 2005-2014 */
# 23 "C:/MJPEG28/MJPEG/src/module/IDCT.cpp" 2


/* Butterfly: but(a,b,x,y) = rot(sqrt(2),4,a,b,x,y) */




// Table static
static const int COS[2][8] = {
    {16384, 16069, 15137, 13623, 11585, 9102, 6270, 3196},
    {23170, 22725, 21407, 19266, 16384, 12873, 8867, 4520}
};

// Default constructor
IDCT::IDCT( sc_module_name zName, double dClockPeriod, sc_time_unit ClockPeriodUnit,
          unsigned char ucID, unsigned char ucPriority, bool bVerbose )
: SpaceBaseModule( zName, dClockPeriod, ClockPeriodUnit, ucID, ucPriority, bVerbose )
{
 //This thread is sensitive to the positive edge of the clock signal
 SC_THREAD(thread);
}


///////////////////////////////////////////////////////////////////////////////
///
/// Thread
///
///////////////////////////////////////////////////////////////////////////////
void IDCT::thread(void)
{
 SpacePrint("IDCT\n");
 // Variable
 int Y[(8*8)];
 int row, column;
 short in[(8*8)];
 unsigned char Idct[(8*8)];
 unsigned int block;
 unsigned int NBLOCKS = 0;
 unsigned int uiCommand;

 while(1)
 {
  // Read the command
  ModuleRead(14, SPACE_BLOCKING, &uiCommand);

  ///
  ///	HEADER
  ///
  if (uiCommand == 1)
  {
   // Get frame attributes from demux (first SOF)
   ModuleRead(14, SPACE_BLOCKING, &NBLOCKS);
  }

  ///
  ///	DATA
  ///
  if (uiCommand == 2)
  {
   for (block = 0; block < (2 * NBLOCKS); ++block)
   {
    ModuleRead(17, SPACE_BLOCKING, &in[0], (8*8));
   L1: for (row = 0; row < 8; row++)
    {
     for (column = 0; column < 8; column++)
      Y[8*row+column] = in[row*8 +column] << 3;
     idct_1d(&Y[8*row+0]);
     /* Result Y is scaled up by factor sqrt(8)*2^S_BITS. */
    }
    computeFor(248);

   L2: for (column = 0; column < 8; column++)
    {
     int Yc[8];

     for (row = 0; row < 8; row++)
      Yc[row] = Y[8*row+column];

     idct_1d(Yc);

     for (row = 0; row < 8; row++)
     {
      /* Result is once more scaled up by a factor sqrt(8). */
      int r = 128 + (((Yc[row]) + (1 << ((2*3) - 1)) - ((Yc[row]) < 0)) >> (2*3));
      /* Clip to 8 bits unsigned: */
      r = r > 0 ? (r < 255 ? r : 255) : 0;
      Idct[8*row+column] = r;
     }
    }
    computeFor(512);

    ModuleWrite(18, SPACE_BLOCKING, &Idct[0], (8*8));
   }
  }

  ///
  /// Ends the module computation
  ///
  if (uiCommand == 4)
   break;

 }
 SpacePrint("IDCT Exits\n");
}


///////////////////////////////////////////////////////////////////////////////
///
/// rot
///
///////////////////////////////////////////////////////////////////////////////
void IDCT::rot(int f, int k, int x, int y, int* rx, int* ry)
{


    *rx = (COS[f][k] * x - COS[f][8-k] * y) >> 14;
    *ry = (COS[f][8-k] * x + COS[f][k] * y) >> 14;


}


///////////////////////////////////////////////////////////////////////////////
///
/// idct_1d
///
///////////////////////////////////////////////////////////////////////////////
void IDCT::idct_1d(int* Y)
{
 // Variable
    int z1[8], z2[8], z3[8];

    /* Stage 1: */
    do { z1[1] = Y[0] - Y[4]; z1[0] = Y[0] + Y[4]; } while(0);
    rot(1, 6, Y[2], Y[6], &z1[2], &z1[3]);
    do { z1[4] = Y[1] - Y[7]; z1[7] = Y[1] + Y[7]; } while(0);
    z1[5] = (23170 * Y[3]) >> 14;
    z1[6] = (23170 * Y[5]) >> 14;

    /* Stage 2: */
    do { z2[3] = z1[0] - z1[3]; z2[0] = z1[0] + z1[3]; } while(0);
    do { z2[2] = z1[1] - z1[2]; z2[1] = z1[1] + z1[2]; } while(0);
    do { z2[6] = z1[4] - z1[6]; z2[4] = z1[4] + z1[6]; } while(0);
    do { z2[5] = z1[7] - z1[5]; z2[7] = z1[7] + z1[5]; } while(0);

    /* Stage 3: */
    z3[0] = z2[0];
    z3[1] = z2[1];
    z3[2] = z2[2];
    z3[3] = z2[3];
    rot(0, 3, z2[4], z2[7], &z3[4], &z3[7]);
    rot(0, 1, z2[5], z2[6], &z3[5], &z3[6]);

    /* Final stage 4: */
    do { Y[7] = z3[0] - z3[7]; Y[0] = z3[0] + z3[7]; } while(0);
    do { Y[6] = z3[1] - z3[6]; Y[1] = z3[1] + z3[6]; } while(0);
    do { Y[5] = z3[2] - z3[5]; Y[2] = z3[2] + z3[5]; } while(0);
    do { Y[4] = z3[3] - z3[4]; Y[3] = z3[3] + z3[4]; } while(0);
}
