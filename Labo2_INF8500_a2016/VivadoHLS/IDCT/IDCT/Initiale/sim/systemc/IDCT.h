// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.4
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _IDCT_HH_
#define _IDCT_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "IDCT_thread.h"

namespace ap_rtl {

struct IDCT : public sc_module {
    // Port declarations 11
    sc_in< sc_logic > nResetPort;
    sc_in_clk ClockPort;
    sc_out< sc_lv<1> > ReadEnablePort_0;
    sc_in< sc_lv<1> > ReadEmptyPort_0;
    sc_in< sc_lv<32> > ReadDataPort_0;
    sc_out< sc_lv<1> > WriteEnablePort_0;
    sc_in< sc_lv<1> > WriteFullPort_0;
    sc_out< sc_lv<32> > WriteDataPort_0;
    sc_out< sc_lv<1> > ReadEnablePort_1;
    sc_in< sc_lv<1> > ReadEmptyPort_1;
    sc_in< sc_lv<32> > ReadDataPort_1;


    // Module declarations
    IDCT(sc_module_name name);
    SC_HAS_PROCESS(IDCT);

    ~IDCT();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    IDCT_thread* grp_IDCT_thread_fu_80;
    sc_signal< sc_lv<1> > grp_IDCT_thread_fu_80_ReadEnablePort_0;
    sc_signal< sc_logic > grp_IDCT_thread_fu_80_ReadEnablePort_0_ap_vld;
    sc_signal< sc_lv<1> > grp_IDCT_thread_fu_80_ReadEmptyPort_0;
    sc_signal< sc_lv<32> > grp_IDCT_thread_fu_80_ReadDataPort_0;
    sc_signal< sc_lv<1> > grp_IDCT_thread_fu_80_WriteEnablePort_0;
    sc_signal< sc_logic > grp_IDCT_thread_fu_80_WriteEnablePort_0_ap_vld;
    sc_signal< sc_lv<1> > grp_IDCT_thread_fu_80_WriteFullPort_0;
    sc_signal< sc_lv<32> > grp_IDCT_thread_fu_80_WriteDataPort_0;
    sc_signal< sc_logic > grp_IDCT_thread_fu_80_WriteDataPort_0_ap_vld;
    sc_signal< sc_lv<1> > grp_IDCT_thread_fu_80_ReadEnablePort_1;
    sc_signal< sc_logic > grp_IDCT_thread_fu_80_ReadEnablePort_1_ap_vld;
    sc_signal< sc_lv<1> > grp_IDCT_thread_fu_80_ReadEmptyPort_1;
    sc_signal< sc_lv<32> > grp_IDCT_thread_fu_80_ReadDataPort_1;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_grp_IDCT_thread_fu_80_ReadDataPort_0();
    void thread_grp_IDCT_thread_fu_80_ReadDataPort_1();
    void thread_grp_IDCT_thread_fu_80_ReadEmptyPort_0();
    void thread_grp_IDCT_thread_fu_80_ReadEmptyPort_1();
    void thread_grp_IDCT_thread_fu_80_WriteFullPort_0();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
