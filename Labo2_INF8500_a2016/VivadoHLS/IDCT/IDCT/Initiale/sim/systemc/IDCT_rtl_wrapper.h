//RTL Wrapper auto-generated by Vivado HLS.
#include "IDCT.h"


SC_MODULE(IDCT_rtl_wrapper) {

    //ESL interface.

    sc_in<bool > nResetPort;

    sc_in<bool > ClockPort;

    sc_out<sc_lv<1> > ReadEnablePort_0;

    sc_in<sc_lv<1> > ReadEmptyPort_0;

    sc_in<sc_lv<32> > ReadDataPort_0;

    sc_out<sc_lv<1> > WriteEnablePort_0;

    sc_in<sc_lv<1> > WriteFullPort_0;

    sc_out<sc_lv<32> > WriteDataPort_0;

    sc_out<sc_lv<1> > ReadEnablePort_1;

    sc_in<sc_lv<1> > ReadEmptyPort_1;

    sc_in<sc_lv<32> > ReadDataPort_1;

    //RTL interface signals.

    sc_signal<sc_logic > rtl_nResetPort;


    sc_signal<sc_lv<1> > rtl_ReadEnablePort_0;

    sc_signal<sc_lv<1> > rtl_ReadEmptyPort_0;

    sc_signal<sc_lv<32> > rtl_ReadDataPort_0;

    sc_signal<sc_lv<1> > rtl_WriteEnablePort_0;

    sc_signal<sc_lv<1> > rtl_WriteFullPort_0;

    sc_signal<sc_lv<32> > rtl_WriteDataPort_0;

    sc_signal<sc_lv<1> > rtl_ReadEnablePort_1;

    sc_signal<sc_lv<1> > rtl_ReadEmptyPort_1;

    sc_signal<sc_lv<32> > rtl_ReadDataPort_1;


IDCT* IDCT_inst;

    SC_CTOR(IDCT_rtl_wrapper) { 

        IDCT_inst = new IDCT("IDCT_rtl_inst");


        initInstances(IDCT_inst);

        SC_METHOD(signal_connection);

        sensitive<<nResetPort<<ClockPort<<rtl_ReadEnablePort_0<<ReadEmptyPort_0<<ReadDataPort_0<<rtl_WriteEnablePort_0<<WriteFullPort_0<<rtl_WriteDataPort_0<<rtl_ReadEnablePort_1<<ReadEmptyPort_1<<ReadDataPort_1;

    }

    ~IDCT_rtl_wrapper() {

    delete IDCT_inst;

    }

    void initInstances(IDCT * IDCT_inst) {

        //The RTL model.

        
        IDCT_inst->nResetPort(rtl_nResetPort);

        IDCT_inst->ClockPort(ClockPort);

        IDCT_inst->ReadEnablePort_0(rtl_ReadEnablePort_0);

        IDCT_inst->ReadEmptyPort_0(rtl_ReadEmptyPort_0);

        IDCT_inst->ReadDataPort_0(rtl_ReadDataPort_0);

        IDCT_inst->WriteEnablePort_0(rtl_WriteEnablePort_0);

        IDCT_inst->WriteFullPort_0(rtl_WriteFullPort_0);

        IDCT_inst->WriteDataPort_0(rtl_WriteDataPort_0);

        IDCT_inst->ReadEnablePort_1(rtl_ReadEnablePort_1);

        IDCT_inst->ReadEmptyPort_1(rtl_ReadEmptyPort_1);

        IDCT_inst->ReadDataPort_1(rtl_ReadDataPort_1);

    }


    void signal_connection() {

        rtl_nResetPort.write((sc_logic)(nResetPort.read()));


        ReadEnablePort_0.write((sc_lv<1>)(rtl_ReadEnablePort_0.read()));


        rtl_ReadEmptyPort_0.write((sc_lv<1>)(ReadEmptyPort_0.read()));

        rtl_ReadDataPort_0.write((sc_lv<32>)(ReadDataPort_0.read()));

        WriteEnablePort_0.write((sc_lv<1>)(rtl_WriteEnablePort_0.read()));


        rtl_WriteFullPort_0.write((sc_lv<1>)(WriteFullPort_0.read()));

        WriteDataPort_0.write((sc_lv<32>)(rtl_WriteDataPort_0.read()));


        ReadEnablePort_1.write((sc_lv<1>)(rtl_ReadEnablePort_1.read()));


        rtl_ReadEmptyPort_1.write((sc_lv<1>)(ReadEmptyPort_1.read()));

        rtl_ReadDataPort_1.write((sc_lv<32>)(ReadDataPort_1.read()));

    }

};
