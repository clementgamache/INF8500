// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.4
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "IDCT.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic IDCT::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> IDCT::ap_const_lv1_0 = "0";
const sc_lv<32> IDCT::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic IDCT::ap_const_logic_0 = sc_dt::Log_0;

IDCT::IDCT(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_IDCT_thread_fu_80 = new IDCT_thread("grp_IDCT_thread_fu_80");
    grp_IDCT_thread_fu_80->ap_clk(ClockPort);
    grp_IDCT_thread_fu_80->ap_rst(nResetPort);
    grp_IDCT_thread_fu_80->ReadEnablePort_0(grp_IDCT_thread_fu_80_ReadEnablePort_0);
    grp_IDCT_thread_fu_80->ReadEnablePort_0_ap_vld(grp_IDCT_thread_fu_80_ReadEnablePort_0_ap_vld);
    grp_IDCT_thread_fu_80->ReadEmptyPort_0(grp_IDCT_thread_fu_80_ReadEmptyPort_0);
    grp_IDCT_thread_fu_80->ReadDataPort_0(grp_IDCT_thread_fu_80_ReadDataPort_0);
    grp_IDCT_thread_fu_80->WriteEnablePort_0(grp_IDCT_thread_fu_80_WriteEnablePort_0);
    grp_IDCT_thread_fu_80->WriteEnablePort_0_ap_vld(grp_IDCT_thread_fu_80_WriteEnablePort_0_ap_vld);
    grp_IDCT_thread_fu_80->WriteFullPort_0(grp_IDCT_thread_fu_80_WriteFullPort_0);
    grp_IDCT_thread_fu_80->WriteDataPort_0(grp_IDCT_thread_fu_80_WriteDataPort_0);
    grp_IDCT_thread_fu_80->WriteDataPort_0_ap_vld(grp_IDCT_thread_fu_80_WriteDataPort_0_ap_vld);
    grp_IDCT_thread_fu_80->ReadEnablePort_1(grp_IDCT_thread_fu_80_ReadEnablePort_1);
    grp_IDCT_thread_fu_80->ReadEnablePort_1_ap_vld(grp_IDCT_thread_fu_80_ReadEnablePort_1_ap_vld);
    grp_IDCT_thread_fu_80->ReadEmptyPort_1(grp_IDCT_thread_fu_80_ReadEmptyPort_1);
    grp_IDCT_thread_fu_80->ReadDataPort_1(grp_IDCT_thread_fu_80_ReadDataPort_1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ClockPort.pos() );

    SC_METHOD(thread_grp_IDCT_thread_fu_80_ReadDataPort_0);
    sensitive << ( ReadDataPort_0 );

    SC_METHOD(thread_grp_IDCT_thread_fu_80_ReadDataPort_1);
    sensitive << ( ReadDataPort_1 );

    SC_METHOD(thread_grp_IDCT_thread_fu_80_ReadEmptyPort_0);
    sensitive << ( ReadEmptyPort_0 );

    SC_METHOD(thread_grp_IDCT_thread_fu_80_ReadEmptyPort_1);
    sensitive << ( ReadEmptyPort_1 );

    SC_METHOD(thread_grp_IDCT_thread_fu_80_WriteFullPort_0);
    sensitive << ( WriteFullPort_0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ClockPort.pos() );

    ReadEnablePort_0.initialize("0");
    WriteEnablePort_0.initialize("0");
    WriteDataPort_0.initialize("00000000000000000000000000000000");
    ReadEnablePort_1.initialize("0");
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "IDCT_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(-12);
    const char* dump_vcd = std::getenv("AP_WRITE_VCD");
    if (dump_vcd && string(dump_vcd) == "1" ) {
    sc_trace(mVcdFile, nResetPort, "(port)nResetPort");
    sc_trace(mVcdFile, ClockPort, "(port)ClockPort");
    sc_trace(mVcdFile, ReadEnablePort_0, "(port)ReadEnablePort_0");
    sc_trace(mVcdFile, ReadEmptyPort_0, "(port)ReadEmptyPort_0");
    sc_trace(mVcdFile, ReadDataPort_0, "(port)ReadDataPort_0");
    sc_trace(mVcdFile, WriteEnablePort_0, "(port)WriteEnablePort_0");
    sc_trace(mVcdFile, WriteFullPort_0, "(port)WriteFullPort_0");
    sc_trace(mVcdFile, WriteDataPort_0, "(port)WriteDataPort_0");
    sc_trace(mVcdFile, ReadEnablePort_1, "(port)ReadEnablePort_1");
    sc_trace(mVcdFile, ReadEmptyPort_1, "(port)ReadEmptyPort_1");
    sc_trace(mVcdFile, ReadDataPort_1, "(port)ReadDataPort_1");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_ReadEnablePort_0, "grp_IDCT_thread_fu_80_ReadEnablePort_0");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_ReadEnablePort_0_ap_vld, "grp_IDCT_thread_fu_80_ReadEnablePort_0_ap_vld");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_ReadEmptyPort_0, "grp_IDCT_thread_fu_80_ReadEmptyPort_0");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_ReadDataPort_0, "grp_IDCT_thread_fu_80_ReadDataPort_0");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_WriteEnablePort_0, "grp_IDCT_thread_fu_80_WriteEnablePort_0");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_WriteEnablePort_0_ap_vld, "grp_IDCT_thread_fu_80_WriteEnablePort_0_ap_vld");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_WriteFullPort_0, "grp_IDCT_thread_fu_80_WriteFullPort_0");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_WriteDataPort_0, "grp_IDCT_thread_fu_80_WriteDataPort_0");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_WriteDataPort_0_ap_vld, "grp_IDCT_thread_fu_80_WriteDataPort_0_ap_vld");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_ReadEnablePort_1, "grp_IDCT_thread_fu_80_ReadEnablePort_1");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_ReadEnablePort_1_ap_vld, "grp_IDCT_thread_fu_80_ReadEnablePort_1_ap_vld");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_ReadEmptyPort_1, "grp_IDCT_thread_fu_80_ReadEmptyPort_1");
    sc_trace(mVcdFile, grp_IDCT_thread_fu_80_ReadDataPort_1, "grp_IDCT_thread_fu_80_ReadDataPort_1");

    }
    mHdltvinHandle.open("IDCT.hdltvin.dat");
    mHdltvoutHandle.open("IDCT.hdltvout.dat");
}

IDCT::~IDCT() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_IDCT_thread_fu_80;
}

void IDCT::thread_ap_clk_no_reset_() {
    if ( nResetPort.read() == ap_const_logic_1) {
        ReadEnablePort_0 = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, grp_IDCT_thread_fu_80_ReadEnablePort_0_ap_vld.read())) {
            ReadEnablePort_0 = grp_IDCT_thread_fu_80_ReadEnablePort_0.read();
        }
    }
    if ( nResetPort.read() == ap_const_logic_1) {
        ReadEnablePort_1 = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, grp_IDCT_thread_fu_80_ReadEnablePort_1_ap_vld.read())) {
            ReadEnablePort_1 = grp_IDCT_thread_fu_80_ReadEnablePort_1.read();
        }
    }
    if ( nResetPort.read() == ap_const_logic_1) {
        WriteDataPort_0 = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, grp_IDCT_thread_fu_80_WriteDataPort_0_ap_vld.read())) {
            WriteDataPort_0 = grp_IDCT_thread_fu_80_WriteDataPort_0.read();
        }
    }
    if ( nResetPort.read() == ap_const_logic_1) {
        WriteEnablePort_0 = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, grp_IDCT_thread_fu_80_WriteEnablePort_0_ap_vld.read())) {
            WriteEnablePort_0 = grp_IDCT_thread_fu_80_WriteEnablePort_0.read();
        }
    }
}

void IDCT::thread_grp_IDCT_thread_fu_80_ReadDataPort_0() {
    grp_IDCT_thread_fu_80_ReadDataPort_0 = ReadDataPort_0.read();
}

void IDCT::thread_grp_IDCT_thread_fu_80_ReadDataPort_1() {
    grp_IDCT_thread_fu_80_ReadDataPort_1 = ReadDataPort_1.read();
}

void IDCT::thread_grp_IDCT_thread_fu_80_ReadEmptyPort_0() {
    grp_IDCT_thread_fu_80_ReadEmptyPort_0 = ReadEmptyPort_0.read();
}

void IDCT::thread_grp_IDCT_thread_fu_80_ReadEmptyPort_1() {
    grp_IDCT_thread_fu_80_ReadEmptyPort_1 = ReadEmptyPort_1.read();
}

void IDCT::thread_grp_IDCT_thread_fu_80_WriteFullPort_0() {
    grp_IDCT_thread_fu_80_WriteFullPort_0 = WriteFullPort_0.read();
}

void IDCT::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    ofstream mAeslHdltvinHandle("IDCT.autohdltvin.dat");
    ofstream mAeslHdltvoutHandle("IDCT.autohdltvout.dat");
    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        mAeslHdltvinHandle << "[[cycle]] " << ap_cycleNo << endl;
        mAeslHdltvoutHandle << "[[cycle]] " << ap_cycleNo << endl;
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mAeslHdltvinHandle << "[nResetPort]" << endl;
        mAeslHdltvinHandle << nResetPort.read() << endl;
        mAeslHdltvinHandle << "[/nResetPort]" << endl;
        mHdltvinHandle << mComma << "{"  <<  " \"nResetPort\" :  \"" << nResetPort.read() << "\" ";
        mAeslHdltvoutHandle << "[ReadEnablePort_0]" << endl;
        mAeslHdltvoutHandle << ReadEnablePort_0.read() << endl;
        mAeslHdltvoutHandle << "[/ReadEnablePort_0]" << endl;
        mHdltvoutHandle << mComma << "{"  <<  " \"ReadEnablePort_0\" :  \"" << ReadEnablePort_0.read() << "\" ";
        mAeslHdltvinHandle << "[ReadEmptyPort_0]" << endl;
        mAeslHdltvinHandle << ReadEmptyPort_0.read() << endl;
        mAeslHdltvinHandle << "[/ReadEmptyPort_0]" << endl;
        mHdltvinHandle << " , " <<  " \"ReadEmptyPort_0\" :  \"" << ReadEmptyPort_0.read() << "\" ";
        mAeslHdltvinHandle << "[ReadDataPort_0]" << endl;
        mAeslHdltvinHandle << ReadDataPort_0.read() << endl;
        mAeslHdltvinHandle << "[/ReadDataPort_0]" << endl;
        mHdltvinHandle << " , " <<  " \"ReadDataPort_0\" :  \"" << ReadDataPort_0.read() << "\" ";
        mAeslHdltvoutHandle << "[WriteEnablePort_0]" << endl;
        mAeslHdltvoutHandle << WriteEnablePort_0.read() << endl;
        mAeslHdltvoutHandle << "[/WriteEnablePort_0]" << endl;
        mHdltvoutHandle << " , " <<  " \"WriteEnablePort_0\" :  \"" << WriteEnablePort_0.read() << "\" ";
        mAeslHdltvinHandle << "[WriteFullPort_0]" << endl;
        mAeslHdltvinHandle << WriteFullPort_0.read() << endl;
        mAeslHdltvinHandle << "[/WriteFullPort_0]" << endl;
        mHdltvinHandle << " , " <<  " \"WriteFullPort_0\" :  \"" << WriteFullPort_0.read() << "\" ";
        mAeslHdltvoutHandle << "[WriteDataPort_0]" << endl;
        mAeslHdltvoutHandle << WriteDataPort_0.read() << endl;
        mAeslHdltvoutHandle << "[/WriteDataPort_0]" << endl;
        mHdltvoutHandle << " , " <<  " \"WriteDataPort_0\" :  \"" << WriteDataPort_0.read() << "\" ";
        mAeslHdltvoutHandle << "[ReadEnablePort_1]" << endl;
        mAeslHdltvoutHandle << ReadEnablePort_1.read() << endl;
        mAeslHdltvoutHandle << "[/ReadEnablePort_1]" << endl;
        mHdltvoutHandle << " , " <<  " \"ReadEnablePort_1\" :  \"" << ReadEnablePort_1.read() << "\" ";
        mAeslHdltvinHandle << "[ReadEmptyPort_1]" << endl;
        mAeslHdltvinHandle << ReadEmptyPort_1.read() << endl;
        mAeslHdltvinHandle << "[/ReadEmptyPort_1]" << endl;
        mHdltvinHandle << " , " <<  " \"ReadEmptyPort_1\" :  \"" << ReadEmptyPort_1.read() << "\" ";
        mAeslHdltvinHandle << "[ReadDataPort_1]" << endl;
        mAeslHdltvinHandle << ReadDataPort_1.read() << endl;
        mAeslHdltvinHandle << "[/ReadDataPort_1]" << endl;
        mHdltvinHandle << " , " <<  " \"ReadDataPort_1\" :  \"" << ReadDataPort_1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        mAeslHdltvinHandle << "[[/cycle]]" << endl;
        mAeslHdltvoutHandle << "[[/cycle]]" << endl;
        ap_cycleNo++;
    }
}

}

